#+autor Cristian David Pacheco Torres
#+course Languages programming fundaments
#+topic ADT


#+begin_src scheme
    <vertices> ::= ()
               ::= (<Symbol> <vertices>)
    <pair-vertices> ::= (<Symbol \in <vertices>> <Symbol \in <vertices>>)
    <edges> ::= ()
            ::=(<pair-vertices> <edges>)
    <graph> ::= (<vertices> <edges>)
#+end_src

#+begin_src scheme
  (define empty-vertices(lambda (list 'empty-vertice)))
  (define vertices (lambda (value verts) (list 'vertices value verts)))
  (define pair-vertices (lambda(val1 val2) (list 'pair-vertices val1 val2)))
  (define empty-edges(lambda (list 'empty-edges)))
  (define edges (lambda (pair-ver edgs) (list 'edges pair-ver edgs)))
 #+end_src
 
#+begin_src scheme
            (define graph-vertices? (expr) (if (car (cdr expr)) ´vertices) #t #f)
            (define graph-vertices (expr) (car (cdr expr)))
            (define nodelist (lambda (vertices)
                              (if (eqv? (car vertices) 'empty-ver) '()
                              (cons (car (cdr  vertices)) (nodelist (cdr (cdr vertices))) )   
                              ) 
                            )
             )
 #+end_src

* Definición de una gramática
[[pdfview:c:/Users/Asus/Documents/University/flp_materials/course_algorithms/clase4.pdf::25][Ejemplo deición de tipos]]




#+begin_src scheme 

#+end_src
